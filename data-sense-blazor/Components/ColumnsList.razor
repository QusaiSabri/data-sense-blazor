@using data_sense_blazor.Models;
@using MudBlazor;
@using data_sense_blazor.Interfaces;
@inherits ObservingComponentBase;
@inject SQLServerDatabaseService DatabaseService;

@if (columns != null)
{
    <div class="mt-3 w-full">
        <MudSimpleTable Bordered="true" Style="overflow-x: auto;">
            <thead>
                <tr>
                    @foreach (var h in headings)
                    {
                        <th>@h</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var column in columns)
                {
                    <tr>
                        <td>@column.Name</td>
                        <td><MudButton OnClick="() => OnPreviewButtonClicked(column.Name)" Variant="Variant.Outlined" Color="Color.Primary" Class="w-full col-span-3">Preview</MudButton></td>
                        <td><MudCheckBox Checked="@column.IsChecked" CheckedChanged="(bool isChecked) => OnCheckboxClicked(column, isChecked)" Color="Color.Primary" Class="items-center col-span-1"></MudCheckBox></td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </div>
}

@code {
    private string _selectedTable;
    [Parameter]
    public Table SelectedTable { get; set; }
    [Parameter]
    public string SelectedDatabase { get; set; }
    public List<string> ColumnsSelected { get; set; }
    private List<Column> columns;
    private List<string> headings = new List<string>() { "Column", "Preview", "Select" };
    private string AliasColumnText { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Entering OnParametersSetAsync");

        if (SelectedTable.Name != _selectedTable)
        {
            var columnsData = await DatabaseService.GetColumns(SelectedDatabase, SelectedTable.Name);
            
            columns = columnsData.Select(column => new Column
                {
                    Name = column.Name,
                    IsChecked = AppState.ColumnsSelected.Contains(column.Name)
                }).ToList();

            
            _selectedTable = SelectedTable.Name;
            ColumnsSelected = AppState.ColumnsSelected;
        }

        Console.WriteLine("Exiting OnParametersSetAsync");
    }

    private async Task OnPreviewButtonClicked(string column)
    {
        Console.WriteLine("Entering OnPreviewButtonClicked");
        try
        {
            var columns = new List<string> { column };
            var query = await DatabaseService.GenerateQuery(columns, SelectedTable, SelectedDatabase);
            AppState.SetQuery(query);

            var queryResult = await DatabaseService.ExecuteQuery(query);
            AppState.SetQueryResult(queryResult);
            
        }
        catch (InvalidOperationException e)
        {
            Console.WriteLine(e.Message);
            throw;
        }
        Console.WriteLine("Exiting OnPreviewButtonClicked");
    }

    private void OnCheckboxClicked(Column column, bool isChecked)
    {
        column.IsChecked = isChecked;
        var newColumnsSelected = new List<string>(AppState.ColumnsSelected);
        if (isChecked)
        {
            newColumnsSelected.Add(column.Name);
        }
        else
        {
            newColumnsSelected.Remove(column.Name);
        }
        AppState.SetColumnsSelected(newColumnsSelected);
    }


}
