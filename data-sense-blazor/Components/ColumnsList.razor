@using data_sense_blazor.Models;
@using MudBlazor;
@using data_sense_blazor.Interfaces;
@inject AppState AppState
@inject SQLServerDatabaseService DatabaseService;

@if (columns != null)
{
    <div class="mt-3 w-full">
        @foreach (var column in columns)
        {
            <MudField Variant="Variant.Outlined" InnerPadding="false" Class="mt-0">
                <div class="grid grid-cols-6 gap-2 items-center divide-x py-2 px-1">
                    <div class="col-span-3">
                        <p class="overflow-hidden overflow-ellipsis">@column.Name</p>
                    </div>
                    <div class="col-span-2">
                        <MudButton OnClick="() => OnPreviewButtonClicked(column.Name)"  Variant="Variant.Outlined" Color="Color.Primary" Class="w-full">Preview</MudButton>
                    </div>
                    <div class="col-span-1">
                        <MudCheckBox Checked="@column.IsChecked" CheckedChanged="(bool isChecked) => OnCheckboxClicked(column, isChecked)" Color="Color.Primary" Class="items-center"></MudCheckBox>
                    </div>
                </div>
            </MudField>
        }
    </div>
}

@code {
    private string _selectedTable;
    [Parameter]
    public Table SelectedTable { get; set; }
    [Parameter]
    public string SelectedDatabase { get; set; }
    public List<string> ColumnsSelected { get; set; }

    private List<Column> columns;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedTable.Name != _selectedTable)
        {
            columns = await DatabaseService.GetColumns(SelectedDatabase, SelectedTable.Name);
            _selectedTable = SelectedTable.Name;
            ColumnsSelected = new List<string>();
        }
    }

    private async Task OnPreviewButtonClicked(string column)
    {
        var columns = new List<string>();
        columns.Add(column);

        var query = await DatabaseService.GenerateQuery(columns, SelectedTable, SelectedDatabase);
        AppState.SetQuery(query);
        AppState.OnQueryChange += StateHasChanged;
        
        var queryResult = await DatabaseService.ExecuteQuery(query);        
        AppState.SetQueryResult(queryResult);
        AppState.OnQueryResultChange += StateHasChanged;
    }

    private void OnCheckboxClicked(Column column, bool isChecked)
    {
        column.IsChecked = isChecked;
        if (isChecked)
        {
            ColumnsSelected.Add(column.Name);
        }
        else
        {
            ColumnsSelected.Remove(column.Name);
        }

        AppState.SetColumnsSelected(ColumnsSelected);
        AppState.OnColumnsSelectedChange += StateHasChanged;
    }
}