@using data_sense_blazor.Models;
@using MudBlazor;
@using data_sense_blazor.Interfaces;
@inject AppState AppState
@inject SQLServerDatabaseService DatabaseService;

@if (columns != null)
{
    <div class="mt-3 w-full">
        <MudSimpleTable Bordered="true" Style="overflow-x: auto;">
                <thead>
                    <tr>
                        @foreach (var h in headings)
                        {
                            <th>@h</th>
                        }
                    </tr>
                </thead>
                <tbody>
                @foreach (var column in columns)
                {
                        <tr>
                            <td>@column.Name</td>
                            @*<td><MudTextField @bind-Value="AliasColumnText"></MudTextField></td>*@
                            <td><MudButton OnClick="() => OnPreviewButtonClicked(column.Name)" Variant="Variant.Outlined" Color="Color.Primary" Class="w-full col-span-3">Preview</MudButton></td>
                            <td><MudCheckBox Checked="@column.IsChecked" CheckedChanged="(bool isChecked) => OnCheckboxClicked(column, isChecked)" Color="Color.Primary" Class="items-center col-span-1"></MudCheckBox></td>                            
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
    </div>
}

@code {
    private string _selectedTable;
    [Parameter]
    public Table SelectedTable { get; set; }
    [Parameter]
    public string SelectedDatabase { get; set; }
    public List<string> ColumnsSelected { get; set; }
    private List<Column> columns;
    private List<string> headings = new List<string>() { "Column", "Preview", "Select" };
    private string AliasColumnText { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedTable.Name != _selectedTable)
        {
            columns = await DatabaseService.GetColumns(SelectedDatabase, SelectedTable.Name);
            _selectedTable = SelectedTable.Name;
            ColumnsSelected = new List<string>();
        }
    }

    private async Task OnPreviewButtonClicked(string column)
    {
        var columns = new List<string>();
        columns.Add(column);

        var query = await DatabaseService.GenerateQuery(columns, SelectedTable, SelectedDatabase);
        AppState.SetQuery(query);
        AppState.OnQueryChange += StateHasChanged;
        
        var queryResult = await DatabaseService.ExecuteQuery(query);        
        AppState.SetQueryResult(queryResult);
        AppState.OnQueryResultChange += StateHasChanged;
    }

    private void OnCheckboxClicked(Column column, bool isChecked)
    {
        column.IsChecked = isChecked;
        if (isChecked)
        {
            AppState.AddToColumnsSelected(column.Name);
        }
        else
        {
            AppState.RemoveFromColumnsSelected(column.Name);
        }

        AppState.OnColumnsSelectedChanged += StateHasChanged;
    }

}