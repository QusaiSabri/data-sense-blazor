@using Microsoft.Extensions.Configuration;
@using MudBlazor
@using data_sense_blazor.Models;
@using data_sense_blazor.Services;
@inject AppState AppState
@inject SQLServerDatabaseService DatabaseService

<MudAutocomplete ValueChanged="OnDatabaseSelected" T="string" Label="Databasess" Value="@SelectedDatabase" SearchFunc="@Search" Variant="Variant.Outlined" Clearable=true Strict=false />

@if (!string.IsNullOrEmpty(SelectedDatabase))
{
    <MudTabs KeepPanelsAlive="true" MinimumTabWidth="20px" Rounded="true" Centered="true" Outlined="true" Border="true">
        <MudTabPanel Text="Tables" >
            <ChildContent>
                <TablesDropDown SelectedDatabase="@SelectedDatabase" />
            </ChildContent>
        </MudTabPanel>
        <MudTabPanel Text="Stored Procedures">
            <ChildContent>
                <div class="p-12 !h-32 text-center">Comming soon</div>
            </ChildContent>
        </MudTabPanel>
        <MudTabPanel Text="Views">
            <ChildContent>
                <div class="p-12 !h-32 text-center">Comming soon</div>
            </ChildContent>
        </MudTabPanel>
        <MudTabPanel Text="Functions">
            <ChildContent>
                <div class="p-12 !h-32 text-center">Comming soon</div>
            </ChildContent>
        </MudTabPanel>
    </MudTabs>

}

@code {
    private string SelectedDatabase;
    private List<string> databases;

    protected override void OnInitialized()
    {
        AppState.OnConnectionStatusChange += OnConnectionStatusChanged;
    }

    private void OnConnectionStatusChanged()
    {
        if (AppState.IsConnected)
        {
            LoadDatabases();
        }
    }
    private Task<IEnumerable<string>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(databases.AsEnumerable());

        var res = databases.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return Task.FromResult(res.AsEnumerable());
    }

    private async void LoadDatabases()
    {
        var databases = await DatabaseService.GetDatabases();
        this.databases = databases.Select(db => db.Name).ToList();
        this.StateHasChanged();
    }

    private void OnDatabaseSelected(string value)
    {
        SelectedDatabase = value;
        AppState.SetSelectedDatabase(value);
    }

    public void Dispose()
    {
        AppState.OnConnectionStatusChange -= OnConnectionStatusChanged;
    }
}
