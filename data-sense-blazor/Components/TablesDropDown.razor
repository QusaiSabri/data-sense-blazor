@using Microsoft.Extensions.Configuration;
@using MudBlazor;
@using data_sense_blazor.Components.Menus
@using data_sense_blazor.Models;
@using data_sense_blazor.Services;
@inject AppState AppState;
@inject SQLServerDatabaseService DatabaseService;

<div class="flex">
<MudAutocomplete ValueChanged="OnTableSelected" T="Table" Label="Tables" Value="@SelectedTable" ToStringFunc="@((Table t) => t?.Name ?? "")" SearchFunc="@SearchFunc" Variant="Variant.Outlined" Class="mt-3" Clearable=true Strict=false />
<TableMenu />
</div>
@if (SelectedTable != null)
{
    <ColumnsList SelectedDatabase="@SelectedDatabase" SelectedTable="@SelectedTable" />
}

@code {
    private string _selectedDatabase;
    [Parameter]
    public string SelectedDatabase { get; set; }
    private Table SelectedTable;
    private List<Table> tables;
    private Func<string, Task<IEnumerable<Table>>> SearchFunc;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedDatabase != _selectedDatabase)
        {
            SelectedTable = null;
            tables = await DatabaseService.GetTables(SelectedDatabase);
            _selectedDatabase = SelectedDatabase;
        }

        SearchFunc = value =>
        {
            if (string.IsNullOrEmpty(value))
                return Task.FromResult(tables.AsEnumerable());

            var res = tables.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));

            return Task.FromResult(res.AsEnumerable());
        };
    }

    private void OnTableSelected(Table value)
    {
        SelectedTable = value;
        AppState.SetSelectedTable(value);
    }
}