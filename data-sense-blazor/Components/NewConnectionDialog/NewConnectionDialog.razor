@using data_sense_blazor.Enums;
@using data_sense_blazor.Factories;
@using data_sense_blazor.Interfaces;
@inject IDialogService DialogService
@inject IServiceProvider services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudDialog>
    <DialogContent>
		<MudPaper Width="auto" Elevation="0">
            <MudList Clickable="true" @bind-SelectedItem="SelectedItem" Class="flex w-fit px-1">
                <MudListItem Value="DataSourceEnum.SQLServer">
					<MudImage Src="/images/sql-server.svg" Alt="SQL Server" Elevation="25" Width="90" ObjectFit="ObjectFit.Cover" Class="rounded-lg p-2.5" />
				</MudListItem>
                <MudListItem Value="DataSourceEnum.MongoDB">
					<MudImage Src="/images/mongodb.svg" Alt="SQL Server" Elevation="25" Width="90" ObjectFit="ObjectFit.Cover" Class="rounded-lg p-2.5" />
				</MudListItem>				
			</MudList>
		</MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="OpenSecondDialog">Next</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    public MudListItem SelectedItem { get; set; }
    public string DataSourceTextValue { get; set; }

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        DataSourceTextValue = await LocalStorage.GetItemAsync<string>("DataSourceTextValue") ?? String.Empty;
        if (!String.IsNullOrEmpty(DataSourceTextValue))
        {
            await OpenSecondDialog();
        }
    }

    private async Task OpenSecondDialog()
    {
        if (String.IsNullOrEmpty(DataSourceTextValue) && !String.IsNullOrEmpty(SelectedItem.Value.ToString()))
        {
            DataSourceTextValue = SelectedItem.Value.ToString();         
            await LocalStorage.SetItemAsync("DataSourceTextValue", DataSourceTextValue);
        }

        IDatabaseConnectionService connectionService = ConnectionServiceFactory.GetConnectionService(DataSourceTextValue, services);

        var parameters = new DialogParameters<ServerConnectionDetails>();
        parameters.Add(x => x.DataSourceType, DataSourceTextValue);
        parameters.Add(x => x.ConnectionService, connectionService);

        DialogService.Show<ServerConnectionDetails>("Connect to Server", parameters);
    }
}
