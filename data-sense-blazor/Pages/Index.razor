@page "/"
@using MudBlazor
@using data_sense_blazor.Components
@using data_sense_blazor.Interfaces;
@inject AppState AppState
@inject IJSRuntime JS
@inject SQLServerDatabaseService DatabaseService;


<MudGrid Spacing="2" Justify="Justify.FlexStart" Class="h-screen split flex-nowrap">
    <div id="dataSenseLeftPane">
        <MudItem xs="12" Class="overflow-auto" style="height: calc(100vh - 100px);">
            <MudStack>
                <MudPaper Elevation="25">
                    <MudToolBar>
                        <MudIconButton Icon="@Icons.Material.Outlined.PostAdd" Color="Color.Inherit" Class="mr-5" />
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
                    </MudToolBar>
                </MudPaper>
                <MudSpacer />
                <MudPaper Elevation="25">
                    <DatabasesDropDown />
                </MudPaper>
            </MudStack>
        </MudItem>
    </div>
    <div id="dataSenseRightPane">
        <MudItem xs="12" Class="overflow-auto" style="height: calc(100vh - 100px);">
            <div id="dataSenseTopRightPane">
                <MudContainer Fixed="true" Class="pb-4">
                    <MudPaper Elevation="25">
                        <MudToolBar>
                            <MudButton OnClick="OnPreviewGroupButtonClicked" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary">Preview Selected</MudButton>
                            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Add" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" />
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
                            <MudIconButton Icon="@Icons.Material.Outlined.PushPin" />
                            <MudIconButton Icon="@Icons.Material.Outlined.PeopleAlt" />
                            <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
                        </MudToolBar>
                    </MudPaper>
                        <MudContainer Fixed="true" Class="mt-8">
                                <Query />
                        </MudContainer>
                </MudContainer>
            </div>
            <div id="dataSenseBottomRightPane" class="overflow-x-auto">
                <MudContainer Fixed="true">
                    <ResultsTable />
                </MudContainer>
            </div>
        </MudItem>
    </div>
</MudGrid>

@code {
    bool open = false;
    bool dense = false;
    bool preserveOpenState = false;

    void ToggleDrawer()
    {
        open = !open;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupSplit", new[] { "dataSenseLeftPane", "dataSenseRightPane" }, new[] { "dataSenseTopRightPane", "dataSenseBottomRightPane" })
             .AsTask()
             .ContinueWith(task =>
             {
                 if (task.IsFaulted)
                 {
                     Console.Error.WriteLine(task.Exception.ToString());
                 }
             });

            await JS.InvokeVoidAsync("updateMudTableHeight");
        }
    }

    private async void OnPreviewGroupButtonClicked()
    {
        var columns = AppState.ColumnsSelected;
        var SelectedTable = AppState.SelectedTable;
        var SelectedDatabase = AppState.SelectedDatabase;

        var query = await DatabaseService.GenerateQuery(columns, SelectedTable, SelectedDatabase);
        AppState.SetQuery(query);
        AppState.OnQueryChange += StateHasChanged;

        var queryResult = await DatabaseService.ExecuteQuery(query);
        AppState.SetQueryResult(queryResult);
        AppState.OnQueryResultChange += StateHasChanged;
    }
}

