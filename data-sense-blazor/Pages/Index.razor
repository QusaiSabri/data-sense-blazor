@page "/"
@using MudBlazor
@using data_sense_blazor.Components
@using data_sense_blazor.Components.NewConnectionDialog;
@using data_sense_blazor.Interfaces;
@inherits ObservingComponentBase;
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject SQLServerDatabaseService DatabaseService;


<MudGrid Justify="Justify.FlexStart" Class="h-screen split flex-nowrap">
    <div id="dataSenseLeftPane">
        <MudItem xs="12" Class="overflow-auto" style="height: calc(100vh - 100px);">
            <MudStack>
                <MudPaper Elevation="25">
                    <MudToolBar>
                        <MudIconButton Icon="@Icons.Material.Outlined.Power" Color="Color.Inherit" @onclick="OpenNewConnectionDialog" />
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
                    </MudToolBar>
                </MudPaper>
                <MudSpacer />
                <MudPaper Elevation="25">
                    <div class="@(AppState.IsConnected ? "" : "hidden")">
                        <DatabasesDropDown />                        
                    </div>
                </MudPaper>
            </MudStack>
        </MudItem>
        <div class="@(AppState.IsConnected ? "absolute bottom-0 rounded-md px-2 py-1 bg-green-300" : "hidden")">
            <div class="text-xs">Connected.</div>
        </div>
    </div>
    <div id="dataSenseRightPane">
        <MudItem xs="12" Class="overflow-auto" style="height: calc(100vh - 100px);">
            <div id="dataSenseTopRightPane" class="overflow-auto">
                <MudContainer Fixed="true" Class="pb-4">
                    <MudPaper Elevation="25">
                        <MudToolBar>
                            <MudButton Disabled="AppState.ColumnsSelected.Count <= 1" OnClick="OnPreviewGroupButtonClicked" Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary">Preview Selected</MudButton>
                            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Add" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Remove" Color="Color.Inherit" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" />
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Outlined.Notifications" />
                            <MudIconButton Icon="@Icons.Material.Outlined.PushPin" />
                            <MudIconButton Icon="@Icons.Material.Outlined.PeopleAlt" />
                            <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
                        </MudToolBar>
                    </MudPaper>
                        <MudContainer Fixed="true" Class="mt-8">
                                <Query />
                        </MudContainer>
                </MudContainer>
            </div>
            <div id="dataSenseBottomRightPane" class="overflow-x-auto">
                <MudContainer Class="max-w-full">
                    <ResultsTable />
                </MudContainer>
            </div>
        </MudItem>        
    </div>
</MudGrid>

@code {
    bool open = false;
    bool dense = false;
    bool preserveOpenState = false;

    void ToggleDrawer()
    {
        open = !open;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setupSplit", new[] { "dataSenseLeftPane", "dataSenseRightPane" }, new[] { "dataSenseTopRightPane", "dataSenseBottomRightPane" })
             .AsTask()
             .ContinueWith(task =>
             {
                 if (task.IsFaulted)
                 {
                     Console.Error.WriteLine(task.Exception.ToString());
                 }
             });

            await JS.InvokeVoidAsync("updateMudTableHeight");
            await JS.InvokeVoidAsync("updateresultStatsBarWidth");
        }
    }

    private async void OnPreviewGroupButtonClicked()
    {
        var columns = AppState.ColumnsSelected;
        var SelectedTable = AppState.SelectedTable;
        var SelectedDatabase = AppState.SelectedDatabase;

        var query = await DatabaseService.GenerateQuery(columns, SelectedTable, SelectedDatabase);
        AppState.SetQuery(query);

        var queryResult = await DatabaseService.ExecuteQuery(query);
        AppState.SetQueryResult(queryResult);
    }

    private void OpenNewConnectionDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<NewConnectionDialog>("Data Source", options);
    }
}
